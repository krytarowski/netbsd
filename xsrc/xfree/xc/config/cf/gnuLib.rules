/*
 * GNU/Hurd shared library rules
 *
 * $XFree86: xc/config/cf/gnuLib.rules,v 1.14 2004/04/08 01:40:19 dawes Exp $
 */

/*
 * GNU/Hurd shared library rules
 * Cloned from Linux (ELF) shared library rules
 *
 */

#ifndef HasSharedLibraries
#define HasSharedLibraries YES
#endif
#ifndef ForceNormalLib
#define ForceNormalLib NO
#endif

XCOMM XXX To rpath or not to rpath...
#ifndef UseRpath
#define UseRpath NO
#endif

#ifndef SharedOldX
#define SharedOldX NO
#endif

#undef SpecialMalloc
#define SpecialMalloc NO

#define BaseShLibReqs   -lc

#ifndef SharedDataSeparation
#define SharedDataSeparation NO
#endif
#ifndef SharedCodeDef
#define SharedCodeDef /**/
#endif
#ifndef SharedLibraryDef
#define SharedLibraryDef /**/
#endif
#ifndef ShLibIncludeFile
#define ShLibIncludeFile <gnuLib.tmpl>
#endif
#ifndef RpathLoadFlags
#if UseRpath
#define RpathLoadFlags -Wl,-rpath=$(USRLIBDIRPATH)
#else
#define RpathLoadFlags /**/
#endif
#endif
#ifndef LibraryRpathLoadFlags
#define LibraryRpathLoadFlags RpathLoadFlags
#endif
#ifndef SharedLibraryLoadFlags
#define SharedLibraryLoadFlags -shared LibraryRpathLoadFlags
#endif
#ifndef PositionIndependentCFlags
#define PositionIndependentCFlags -fPIC
#endif
#ifndef PositionIndependentCplusplusFlags
#define PositionIndependentCplusplusFlags -fPIC
#endif
#ifndef ExtraLoadFlags
#ifdef UseInstalled
XCOMM XXX Maybe superfluous.
#define ExtraLoadFlags RpathLoadFlags -Wl,-rpath-link=$(USRLIBDIRPATH)
#else
#define ExtraLoadFlags RpathLoadFlags -Wl,-rpath-link=$(BUILDLIBDIR)
#endif
#endif

#ifndef SetSonameRev
#define SetSonameRev(rev) set +e; S=`expr rev : '\([0-9]*\)'`; set -e
#endif

/*
 * InstallSharedLibrary - generate rules to install the shared library.
 * NOTE: file must be executable, hence "INSTBINFLAGS"
 */
#ifndef InstallSharedLibrary
#define InstallSharedLibrary(libname,rev,dest)				@@\
install::								@@\
	MakeDir($(DESTDIR)dest)						@@\
	$(INSTALL) $(INSTALLFLAGS) $(INSTBINFLAGS) Concat($(LIBPREFIX),libname.so.rev) $(DESTDIR)dest @@\
	@SetSonameRev(rev); \						@@\
	T=Concat($(DESTDIR)dest/$(LIBPREFIX),libname.so.$$S); \		@@\
	  if [ rev != $$S ]; then (set -x; \				@@\
		$(RM) $$T && $(LN) Concat($(LIBPREFIX),libname.so.rev) $$T); fi	@@\
	  @if $(SOSYMLINK); then (set -x; \				@@\
	  $(RM) Concat($(DESTDIR)dest/$(LIBPREFIX),libname.so); \	@@\
	  $(LN) Concat($(LIBPREFIX),libname.so.rev) Concat($(DESTDIR)dest/$(LIBPREFIX),libname.so)); fi
#endif /* InstallSharedLibrary */

/*
 * InstallSharedLibraryData - generate rules to install the shared library data
 */
#ifndef InstallSharedLibraryData
#define InstallSharedLibraryData(libname,rev,dest)
#endif /* InstallSharedLibraryData */


/*
 * SharedLibraryTarget - generate rules to create a shared library;
 * build it into a different name so that we do not hose people by having
 * the library gone for long periods.
 */
#ifndef SharedLibraryTarget
#define SharedLibraryTarget(libname,rev,solist,down,up)			@@\
AllTarget(Concat($(LIBPREFIX),libname.so.rev))				@@\
									@@\
Concat($(LIBPREFIX),libname.so.rev):  solist $(EXTRALIBRARYDEPS)	@@\
	$(RM) $@~							@@\
	@SetSonameRev(rev); \						@@\
	SONAME=Concat($(LIBPREFIX),libname.so.$$S); \			@@\
		(set -x; cd down; $(CC) -o up/$@~ $(SHLIBLDFLAGS) -Wl,-soname,$$SONAME solist $(REQUIREDLIBS) BaseShLibReqs); \ @@\
		if [ $$SONAME != $@ ]; then (set -x; \			@@\
			$(RM) $$SONAME; $(LN) $@ $$SONAME); fi; \	@@\
		LinkBuildSonameLibrary($$SONAME)			@@\
	$(RM) $@							@@\
	$(MV) $@~ $@							@@\
	@if $(SOSYMLINK); then (set -x; \				@@\
	  $(RM) Concat($(LIBPREFIX),libname.so); \			@@\
	  $(LN) $@ Concat($(LIBPREFIX),libname.so)); fi			@@\
	LinkBuildLibrary($@)						@@\
	LinkBuildLibraryMaybe(Concat($(LIBPREFIX),libname.so),$(SOSYMLINK)) @@\
									@@\
clean::									@@\
	@SetSonameRev(rev); \						@@\
	set -x; $(RM) Concat($(LIBPREFIX),libname.so.$$S)		@@\
	$(RM) Concat($(LIBPREFIX),libname.so.rev) Concat($(LIBPREFIX),libname.so)

#endif /* SharedLibraryTarget */

/*
 * SharedDepLibraryTarget - generate rules to create a shared library.
 */
#ifndef SharedDepLibraryTarget
#define SharedDepLibraryTarget(libname,rev,deplist,solist,down,up)	@@\
AllTarget(Concat($(LIBPREFIX),libname.so.rev))				@@\
									@@\
Concat($(LIBPREFIX),libname.so.rev):  deplist $(EXTRALIBRARYDEPS)	@@\
	$(RM) $@~							@@\
	@SetSonameRev(rev); \						@@\
	SONAME=Concat($(LIBPREFIX),libname.so.$$S); \			@@\
		(set -x; cd down; $(CC) -o up/$@~ $(SHLIBLDFLAGS) -Wl,-soname,$$SONAME solist $(REQUIREDLIBS) BaseShLibReqs); \ @@\
		if [ $$SONAME != $@ ]; then (set -x; \			@@\
			$(RM) $$SONAME; $(LN) $@ $$SONAME); fi; \	@@\
		LinkBuildSonameLibrary($$SONAME)			@@\
	$(RM) $@ 							@@\
	$(MV) $@~ $@							@@\
	@if $(SOSYMLINK); then (set -x; \				@@\
	  $(RM) Concat($(LIBPREFIX),libname.so); \			@@\
	  $(LN) $@ Concat($(LIBPREFIX),libname.so)); fi			@@\
	LinkBuildLibrary($@)						@@\
	LinkBuildLibraryMaybe(Concat($(LIBPREFIX),libname.so),$(SOSYMLINK)) @@\
									@@\
clean::									@@\
	@SetSonameRev(rev); \						@@\
	set -x; $(RM) Concat($(LIBPREFIX),libname.so.$$S)		@@\
	$(RM) Concat($(LIBPREFIX),libname.so.rev) Concat($(LIBPREFIX),libname.so)

#endif /* SharedDepLibraryTarget */

#ifndef SharedDepModuleTarget
#define SharedDepModuleTarget(name,deps,solist)				@@\
AllTarget(name)								@@\
									@@\
name: deps								@@\
	$(RM) $@~							@@\
	$(CC) -o $@~ $(SHLIBLDFLAGS) solist $(REQUIREDLIBS) BaseShLibReqs @@\
	$(RM) $@							@@\
	$(MV) $@~ $@							@@\
									@@\
clean::									@@\
	$(RM) name

#endif /* SharedDepModuleTarget */

/*
 * SharedLibraryDataTarget - generate rules to create shlib data file;
 */
#ifndef SharedLibraryDataTarget
#define SharedLibraryDataTarget(libname,rev,salist)
#endif /* SharedLibraryTarget */
