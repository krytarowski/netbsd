XCOMM $XConsortium: Imakefile /main/16 1996/10/27 18:07:43 kaleb $




XCOMM $XFree86: xc/programs/Xserver/hw/xfree86/os-support/bus/Imakefile,v 1.33 2004/09/28 15:17:14 dawes Exp $

#include <Server.tmpl>

#if defined(LinuxArchitecture) && defined(AlphaArchitecture)

XCOMM Alpha (Linux) PCI driver

PCIDRVRSRC = axpPci.c
PCIDRVROBJ = axpPci.o

#elif defined(LinuxArchitecture) && defined(SparcArchitecture)

XCOMM Sparc SBUS driver and generic Linux PCI driver

PCIDRVRSRC = linuxPci.c
PCIDRVROBJ = linuxPci.o
SBUSDRVSRC = Sbus.c
SBUSDRVOBJ = Sbus.o

#elif defined(SunArchitecture) && defined(SparcArchitecture)

XCOMM Sparc SBUS & PCI drivers

PCIDRVRSRC = sparcPci.c
PCIDRVROBJ = sparcPci.o
SBUSDRVSRC = Sbus.c
SBUSDRVOBJ = Sbus.o

#elif defined(LinuxArchitecture) && \
      (defined(PpcArchitecture) || \
       defined(MipsArchitecture) || \
       defined(ia64Architecture) || \
       defined(Mc68020Architecture) || \
       defined(Arm32Architecture) || \
       defined(HPArchitecture) || \
       defined(s390Architecture) || \
       defined(SuperHArchitecture) || \
       defined(SuperHebArchitecture))

XCOMM generic linux PCI driver (using /proc/bus/pci, requires kernel 2.2)

PCIDRVRSRC = linuxPci.c
PCIDRVROBJ = linuxPci.o

#elif defined(OpenBSDArchitecture) && \
	(defined(PpcArchitecture) || \
	defined(AlphaArchitecture) || \
	defined(Sparc64Architecture))

XCOMM OpenBSD/alpha, OpenBSD/powerpc and OpenBSD/sparc64

PCIDRVRSRC = freebsdPci.c
PCIDRVROBJ = freebsdPci.o

#elif defined(NetBSDArchitecture) && defined(PpcArchitecture)

XCOMM NetBSD/powerpc

PCIDRVRSRC = netbsdPci.c
PCIDRVROBJ = netbsdPci.o

#elif defined(NetBSDArchitecture) && defined(MipsArchitecture)

XCOMM NetBSD/mips

PCIDRVRSRC = netbsdPci.c
PCIDRVROBJ = netbsdPci.o

#elif defined(PpcArchitecture)

XCOMM PowerPC PCI drivers

PCIDRVRSRC = ppcPci.c
PCIDRVROBJ = ppcPci.o

#elif defined(NetBSDArchitecture) && defined(CatsArchitecture) 

XCOMM NetBSD/cats

PCIDRVRSRC = netbsdPci.c
PCIDRVROBJ = netbsdPci.o

#elif defined(NetBSDArchitecture) && defined(ArmArchitecture) 

XCOMM NetBSD/shark

PCIDRVRSRC = netbsdPci.c
PCIDRVROBJ = netbsdPci.o
#elif defined(LinuxArchitecture) && \
     (defined(i386Architecture) || defined(AMD64Architecture))

XCOMM ix86 PCI driver with OS fallback for Linux

PCIDRVRSRC = ix86Pci.c linuxPci.c
PCIDRVROBJ = ix86Pci.o linuxPci.o

#elif defined(FreeBSDArchitecture) && \
     (defined(AlphaArchitecture) || defined(AMD64Architecture))


XCOMM generic FreeBSD PCI driver (using /dev/pci)

PCIDRVRSRC = freebsdPci.c
PCIDRVROBJ = freebsdPci.o

#elif defined(FreeBSDArchitecture) && defined(Sparc64Architecture)

XCOMM Sparc SBUS & PCI drivers

PCIDRVRSRC = freebsdPci.c
PCIDRVROBJ = freebsdPci.o
SBUSDRVSRC = Sbus.c
SBUSDRVOBJ = Sbus.o

#elif defined(NetBSDArchitecture) && defined(AlphaArchitecture)

XCOMM Alpha (NetBSD) PCI driver

PCIDRVRSRC = netbsdPci.c
PCIDRVROBJ = netbsdPci.o

#elif defined(NetBSDArchitecture) && defined(SparcArchitecture)

XCOMM Sparc(64) (NetBSD) PCI driver

PCIDRVRSRC = netbsdPci.c
PCIDRVROBJ = netbsdPci.o
SBUSDRVSRC = netbsdSbus.c
SBUSDRVOBJ = netbsdSbus.o

#elif defined(i386Architecture) || \
      defined(ia64Architecture) || \
      defined(AMD64Architecture)

XCOMM ix86 PCI driver

PCIDRVRSRC = ix86Pci.c
PCIDRVROBJ = ix86Pci.o
XCOMM PCIDRVRSRC = linuxPci.c
XCOMM PCIDRVROBJ = linuxPci.o

#else
XCOMM no PCI driver -- shouldn't get here
#endif

#if defined(ia64Architecture)
PCIARCHSRC = ia64Pci.c 460gxPCI.c e8870PCI.c zx1PCI.c
PCIARCHOBJ = ia64Pci.o 460gxPCI.o e8870PCI.o zx1PCI.o
#endif

XCOMM access the PCI bus through /dev/ttyE0 on NetBSD/sparc64 and PowerPC
XCOMM that way we always see the console fb ( if it's a PCI device ) even if
XCOMM it's not visible through /dev/pci0
XCOMM we should probably do that on all archs that don't mmap PCI space via
XCOMM /dev/mem

#if defined(NetBSDArchitecture)

#if defined(Sparc64Architecture) || defined(SparcArchitecture) || \
    defined(PpcArchitecture)
CFLAGS += -DPCI_VIA_TTYE0
#endif

#endif

SRCS = Pci.c $(PCIDRVRSRC) $(SBUSDRVSRC) $(PCIARCHSRC)
OBJS = Pci.o $(PCIDRVROBJ) $(SBUSDRVOBJ) $(PCIARCHOBJ)

INCLUDES = -I. -I$(XF86COMSRC) -I$(XF86OSSRC) \
	   -I$(SERVERSRC)/include -I$(XINCLUDESRC)

NormalLibraryObjectRule()
SubdirLibraryRule($(OBJS))

/*
 * egcs 1.1.2 as provided with some Linux distributions has an optimisation
 * bug that results in bad code for this file.
 */
#if Egcs112Bug
SpecialCObjectRule(Pci,NullParameter,-O0)
#endif

#if defined(SunArchitecture) && defined(SparcArchitecture)

LFS_DEFINES = `getconf LFS_CFLAGS`

SpecialCObjectRule(sparcPci,NullParameter,$(LFS_DEFINES))

#endif

DependTarget()
